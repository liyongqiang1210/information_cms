<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
	<!-- Web容器加载顺序ServletContext==》context==》param==》listener==》filter==》servlet -->

	<!-- 配置Shiro过滤器,先让Shiro过滤系统接收到的请求 -->
	<!-- 使用[/*]匹配所有请求,保证所有的可控请求都经过Shiro的过滤 -->
	<!-- 通常会将此filter-mapping放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的 -->
	<filter>
		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 指定Spring的配置文件 -->
	<!-- 否则Spring会默认从WEB-INF下寻找配置文件,contextConfigLocation属性是Spring内部固定的 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring-context.xml</param-value>
	</context-param>
	<!-- 防止发生java.beans.Introspector内存泄露,应将它配置在ContextLoaderListener的前面 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	<!-- 实例化Spring容器 -->
	<!-- 应用启动时,该监听器被执行,它会读取Spring相关配置文件,其默认会到WEB-INF中查找spring-context.xml -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- 自定义监听器配置开始 -->
	<listener>
		<listener-class>com.maven.listener.MyServletContextListener</listener-class>
	</listener>
	<!-- 自定义监听器配置结束 -->

	<!-- encodingFilter解决乱码问题 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<async-supported>true</async-supported>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 自定义过滤器配置开始 -->
	<!-- 注册LogFilter -->
	<filter>
		<description>日志过滤器</description>
		<filter-name>LogFilter</filter-name>
		<filter-class>com.maven.filter.LogFilter</filter-class>
		<!-- 开始配置过滤器初始化参数 -->
		<init-param>
			<param-name>name</param-name>
			<param-value>liyongqiang</param-value>
		</init-param>
		<init-param>
			<param-name>like</param-name>
			<param-value>java</param-value>
		</init-param>
	</filter>
	<!-- 映射Filter -->
	<filter-mapping>
		<filter-name>LogFilter</filter-name>
		<!-- "/*"表示拦截所有请求 -->
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 注册InvilidCharacterFilter -->
	<filter>
		<description>防止脚本攻击过滤器</description>
		<filter-name>InvilidCharacterFilter</filter-name>
		<filter-class>com.maven.filter.InvilidCharacterFilter</filter-class>
	</filter>
	<!-- 映射InvilidCharacterFilter -->
	<filter-mapping>
		<filter-name>InvilidCharacterFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 自定义过滤器配置结束 -->

	<!-- 配置SpringMVC核心控制器 -->
	<servlet>
		<servlet-name>SpringMVC</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring-mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>
	<servlet-mapping>
		<servlet-name>SpringMVC</servlet-name>
		<!-- 这里如果用/代替*.do的话需要在spring-mvc.xml文件中配置静态资源访问的配置 -->
		<!-- 直接拦截.do结尾的请求 -->
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>
	
	<!-- session失效时间 -->
	<session-config>
		<session-timeout>1</session-timeout>
	</session-config>
	
	<!-- 错误页面配置 -->
	<error-page>
		<error-code>404</error-code>
		<location>/error/404.html</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/error/500.html</location>
	</error-page>

	<!-- 欢迎页面 -->
	<welcome-file-list>
		<welcome-file>login.html</welcome-file>
	</welcome-file-list>
</web-app>